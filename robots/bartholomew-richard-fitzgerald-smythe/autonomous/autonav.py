from magicbot import AutonomousStateMachine, state

from components.drivetrain import Drivetrain, DrivetrainState
from components.sensors import EncoderSide

from robotmap import RobotMap

import math

class Autonav(AutonomousStateMachine):
    MODE_NAME = "Autonav"

    drivetrain: Drivetrain

    nodes = [[18.781085809061555, 14.166214205326323], [5.900759665471298, 10.36961364933519], [-14.049881351901652, 7.886993772175307], [-38.94564680091145, 6.970288244861911], [-60.21885629171648, 7.297902916816212], [-73.77306954617585, 8.095162080149281], [-81.28537470604324, 8.798811924124141], [-84.74432007193809, 9.14619674260584], [-85.07362195634757, 9.037595689680611], [-82.2050033830491, 8.464844058283791], [-74.92830140366499, 7.513448437425575], [-60.56068925834879, 6.464396975916295], [-40.67139410645951, 5.968013954865969], [-22.41529998609682, 6.212605764538259], [-8.998071342868212, 6.9034592625087345], [-0.16023076694031269, 7.75241390707181], [5.382642434930472, 8.582696698274487], [8.660442752595875, 9.301964079485593], [10.30687352691795, 9.864724417847048], [10.67051021633907, 10.251026818908135], [9.911901167643553, 10.456660149555178], [8.059012230883242, 10.489570121400755], [5.034096281100852, 10.36996127193372], [0.7412672174213384, 10.136109635545179], [-3.5645264805681665, 9.87378575087351], [-6.562704258866655, 9.59890639445576], [-8.121755472262222, 9.273974082779391], [-8.115036628365168, 8.878432706044428], [-6.321564751717618, 8.412880839377634], [-2.387798900931818, 7.904411743919704], [4.157890925951094, 7.416514383334478], [13.72000155901114, 7.061556252116726], [26.11574505156204, 7.001573032474144], [39.544632854452715, 7.368297675581521], [50.584747885370234, 7.983918969459863], [58.977753930338366, 8.646544701721973], [65.4602707921506, 9.252057825355479], [70.51648808912668, 9.726861425808016], [72.88966485672658, 9.839886995395013], [71.55029270987163, 9.398726278779067], [65.63148676394619, 8.451417044730128], [52.38335366758561, 7.262709166499453], [27.93943662337612, 6.57627975187735], [0.307482245578745, 7.271212586448178], [-18.070312400362948, 8.527664356682557], [-30.67420022496798, 9.569526863980428], [-41.1217921061677, 10.144107459218757], [-51.64839482042334, 10.218429716782698], [-64.09436307590265, 9.903335171696352], [-80.29188741069343, 9.491479213815719], [-99.70811258930658, 9.491479213815714], [-115.90563692409702, 9.903335171696336], [-128.3516051795765, 10.218429716782731], [-138.87820789383275, 10.144107459218835], [-149.32579977503207, 9.569526863980425], [-161.92968759963688, 8.527664356682505], [-180.30748224557888, 7.271212586448178], [-207.93943662337534, 6.576279751877431], [-232.38335366758642, 7.262709166499395], [-245.6314867639458, 8.451417044730134], [-251.55029270987163, 9.398726278779076], [-252.88966485672657, 9.839886995395013], [-250.51648808912668, 9.726861425808018], [-245.46027079215077, 9.25205782535548], [-238.97775393033896, 8.646544701721966], [-230.5847478853698, 7.983918969459883], [-219.54463285445323, 7.368297675581465], [-206.11574505156216, 7.001573032474151], [-193.72000155901102, 7.0615562521167226], [-184.15789092595102, 7.416514383334478], [-177.61220109906813, 7.904411743919649], [-173.67843524828245, 8.41288083937766], [-171.88496337163488, 8.878432706044485], [-171.87824452773773, 9.273974082779393], [-173.43729574113334, 9.598906394455817], [-176.4354735194319, 9.87378575087354], [-180.74126721742127, 10.136109635545235], [-185.0340962811008, 10.369961271933748], [-188.05901223088327, 10.489570121400742], [-189.9119011676437, 10.456660149555184], [-190.67051021633895, 10.251026818908146], [-190.30687352691803, 9.864724417847036], [-188.66044275259597, 9.301964079485595], [-185.38264243493055, 8.582696698274388], [-179.83976923305954, 7.75241390707181], [-171.001928657132, 6.903459262508744], [-157.58470001390302, 6.21260576453825], [-139.32860589354047, 5.968013954865962], [-119.43931074165123, 6.46439697591631], [-105.07169859633487, 7.513448437425589], [-97.794996616951, 8.464844058283795], [-94.92637804365233, 9.037595689680636], [-95.255679928062, 9.14619674260586], [-98.71462529395676, 8.798811924124148], [-106.22693045382424, 8.095162080149292], [-119.78114370828352, 7.297902916816138], [-141.05435319908858, 6.970288244861925], [-165.95011864809834, 7.886993772175307], [-185.90075966547127, 10.369613649335191], [-198.7810858090616, 14.166214205326334], [0, 0]]
    index = 0

    @state(first=True)
    def track(self, initial_call):
        '''
        if initial_call:
            self.drivetrain.turn_to_angle(-150)
        elif self.drivetrain.turn_pid.get_on_target():
            self.drivetrain.stop()
            self.done()
        '''
        if initial_call:
            self.index = 0
            self.drivetrain.navx.reset()
            self.drivetrain.encoders.reset()
            self.drivetrain.powertrain.set_arcade_powers(power=-RobotMap.Drivetrain.max_auto_power)
            self.drivetrain.special_turn_to_angle(self.nodes[self.index][0])

        
        elif self.index >= len(self.nodes)-1:
            self.drivetrain.stop()
            self.done()
        
        elif self.drivetrain.get_position(EncoderSide.BOTH) > self.nodes[self.index][1]:
            self.drivetrain.turn_pid.stop()
            self.index+=1
            self.drivetrain.special_turn_to_angle(self.nodes[self.index][0])
            self.drivetrain.encoders.reset()
            #print("node switch")
            
