from magicbot import AutonomousStateMachine, state

from components.drivetrain import Drivetrain, DrivetrainState
from components.sensors import EncoderSide

from robotmap import RobotMap

import math

class Paths:
    ONE = [[23.013100935044935, 4.927222624651546], [16.264601433573084, 4.538069378038508], [8.899116915451591, 4.228805183214876], [1.085806680114871, 4.000162696268023], [-6.925492130738518, 3.8491669980768446], [-14.846129317201363, 3.768620981015539], [-22.408901164860726, 3.747636316403059], [-29.418067683588244, 3.773062403401468], [-35.768759690590606, 3.8312047173543595], [-41.43696876856841, 3.9092191826932203], [-46.45495030342475, 3.9959092240630345], [-50.88611967982599, 4.081982456404169], [-54.806310292152844, 4.159963552048723], [-58.292349276692356, 4.223948128477575], [-61.41630936711843, 4.269317409621812], [-64.24340834848788, 4.292473878608905], [-66.83199506301433, 4.290620406761028], [-69.23464890519071, 4.261586162944494], [-71.49988519303982, 4.203694854390188], [-73.67428415360126, 4.115669058934904], [-75.8051010788301, 3.9965654743885817], [-77.94364186434204, 3.8457384948554045], [-80.1499915093918, 3.6628335274925092], [-82.50020598044158, 3.4478179865958496], [-85.09810356870234, 3.201070039481051], [0, 0]]
    TWO = [[49.578133567152086, 5.439344536500472], [66.11435197316376, 8.18742629954855], [72.38276039734076, 10.646935019284788], [75.00195819294566, 12.552651069399033], [75.80792269772228, 13.84100801202775], [75.38743553504389, 14.497103166737332], [73.85228309016884, 14.526984712320258], [71.00669409257608, 13.95540865522355], [66.28725382197561, 12.837283300871547], [58.48959191477367, 11.292530954797119], [45.23991318318441, 9.601131952372587], [23.2437766059196, 8.421441492568068], [-5.437322174842624, 8.861701254288777], [-27.776433285927325, 10.633618567859811], [-42.81412926781997, 11.76838787185274], [-56.97066361890502, 11.794412208159109], [-75.0302980543336, 11.012213258403012], [-91.39784773644764, 10.71738314916931], [-93.13477064784692, 10.73383394668775], [-89.34240534729906, 10.710673424138879], [-89.0685784339199, 10.710820508518397], [-90.00264644490468, 10.711324873960546], [-90.43658211212619, 10.712527803245829], [-90.34237947419261, 10.712214420085038], [-89.71997034534144, 10.710871836486248], [0, 0]]
    THREE = [[84.39648090555701, 11.62647896637073], [-267.80151365787464, 11.892558413988741], [-263.464880792749, 12.144771471559183], [-262.2792273068795, 12.227932864650166], [-264.1287493644269, 12.100952219100993], [-269.1887771801213, 11.828221657953614], [82.22434646186298, 11.592354740552727], [70.214887573295, 11.699123059782483], [57.150774633909336, 12.084875279575046], [44.534651440440854, 12.227490530178049], [31.02569437649039, 12.130032847244701], [15.649642120107028, 12.007600967465951], [-0.0, 11.988777520411823], [-15.64964212010729, 12.007600967465965], [-31.025694376490545, 12.130032847244673], [-44.53465144044054, 12.227490530178017], [-57.15077463390916, 12.08487527957502], [-70.21488757329509, 11.699123059782476], [-82.22434646186285, 11.592354740552718], [-90.81122281987874, 11.828221657953614], [-95.87125063557316, 12.100952219101007], [-97.72077269312062, 12.22793286465018], [-96.53511920725101, 12.144771471559215], [-92.19848634212535, 11.89255841398873], [-84.39648090555691, 11.62647896637074], [0, 0]]
    FOUR = [[85.44669976214757, 4.748248525917799], [-269.3156527514233, 4.85526368835853], [-266.674361699064, 4.926938652709303], [-266.4381401259706, 4.9339659269933955], [-268.5876283314238, 4.873778642896525], [86.7144649029857, 4.770070768288422], [79.55276414278607, 4.6799237038044605], [72.33663818308919, 4.672866612083094], [66.38894060835072, 4.736268409195954], [61.807850640713845, 4.8380309996240225], [58.555591700678036, 4.952848215814623], [56.54197957341636, 5.063026696651243], [55.67481473259374, 5.157913517484322], [55.67292015795986, 5.228651369528129], [55.25450029748867, 5.2489291730904934], [53.944944172701305, 5.211146217587464], [51.68117900978661, 5.121021099572728], [48.34450714835789, 4.989007395852151], [43.76684968123957, 4.831687172100035], [37.756253393666746, 4.673720217122021], [30.16447375388483, 4.549725420036128], [21.017260432763656, 4.5043637422562695], [10.673496396008023, 4.587727810755061], [-0.1323102819898293, 4.844606967436753], [-10.509913247404521, 5.302376787232356], [0, 0]]

class Bounce(AutonomousStateMachine):
    MODE_NAME = "Bounce"

    drivetrain: Drivetrain

    def track(self, initial_call, path, pos_coeff):
        if initial_call:
            self.nodes = path
            self.index = 0
            self.drivetrain.navx.reset()
            self.drivetrain.encoders.reset()
            self.drivetrain.special_turn_to_angle(self.nodes[self.index][0])
            return 0
        
        elif self.index >= len(self.nodes)-1:
            self.drivetrain.stop()
            return -1
        
        elif pos_coeff*self.drivetrain.get_position(EncoderSide.BOTH) > self.nodes[self.index][1]:
            self.drivetrain.turn_pid.stop()
            self.index+=1
            self.drivetrain.special_turn_to_angle(self.nodes[self.index][0])
            self.drivetrain.encoders.reset()
            return 0
    
    @state(first=True)
    def one(self, initial_call):
        self.drivetrain.powertrain.set_arcade_powers(power=-RobotMap.Drivetrain.max_auto_power)
        result = track(initial_call, Paths.ONE, 1)
        if result < 0:
            self.next_state('two')
    
    @state()
    def two(self, initial_call):
        self.drivetrain.powertrain.set_arcade_powers(power=RobotMap.Drivetrain.max_auto_power)
        result = track(initial_call, Paths.TWO, -1)
        if result < 0:
            self.next_state('three')
    
    @state()
    def three(self, initial_call):
        self.drivetrain.powertrain.set_arcade_powers(power=-RobotMap.Drivetrain.max_auto_power)
        result = track(initial_call, Paths.THREE, 1)
        if result < 0:
            self.next_state('four')
    
    @state()
    def four(self, initial_call):
        self.drivetrain.powertrain.set_arcade_powers(power=RobotMap.Drivetrain.max_auto_power)
        result = track(initial_call, Paths.FOUR, -1)
        if result < 0:
            self.done()
